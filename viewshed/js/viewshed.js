// Generated by CoffeeScript 2.0.0-beta7
window.RFAnalysisViewshed = function () {
  var self, Site;
  self = [];
  function RFAnalysisViewshed() {
    this.results = {};
    self = this;
    window.self = this;
    this.constants = { earthRadius: 6378137 };
  }
  RFAnalysisViewshed.prototype.createSite = function (lat, lng, radioFrequency, aboveGroundHeight, distance, precision) {
    var mySite;
    mySite = new Site(lat, lng, radioFrequency, aboveGroundHeight, distance, precision);
    if (null != this.results.sites)
      this.results.sites;
    else
      this.results.sites = [];
    this.results.sites.push(mySite);
    return mySite;
  };
  Site = function () {
    var Viewshed;
    function Site(param$, param$1, param$2, param$3) {
      var instance$;
      instance$ = this;
      this.createViewshedBusiness = function (a, b, c, e) {
        return Site.prototype.createViewshedBusiness.apply(instance$, arguments);
      };
      this.createViewshed = function (a, b) {
        return Site.prototype.createViewshed.apply(instance$, arguments);
      };
      this.lat = param$;
      this.lng = param$1;
      this.radioFrequency = param$2;
      this.aboveGroundHeight = param$3;
      this.setLambda();
    }
    Site.prototype.createViewshed = function (distance, precision) {
      var myViewshed;
      myViewshed = new Viewshed(this, distance, precision);
      self.results.sites.viewshed = myViewshed;
      return myViewshed;
    };
    Site.prototype.createViewshedBusiness = function (distance, precision, googleClientId, urlToSignKey) {
      var myViewshed;
      myViewshed = new Viewshed(this, distance, precision, googleClientId, urlToSignKey);
      self.results.sites.viewshed = myViewshed;
      return myViewshed;
    };
    Site.prototype.setLambda = function () {
      return this.lambda = 299792458 / (this.radioFrequency * Math.pow(10, 9));
    };
    Viewshed = function () {
      function Viewshed(param$, param$1, param$2, param$3, param$4) {
        var instance$;
        instance$ = this;
        this.createViewshed = function () {
          return Viewshed.prototype.createViewshed.apply(instance$, arguments);
        };
        this.createViewshedBusiness = function (a, b) {
          return Viewshed.prototype.createViewshedBusiness.apply(instance$, arguments);
        };
        this.preparePolygons = function (a) {
          return Viewshed.prototype.preparePolygons.apply(instance$, arguments);
        };
        this.getAngle = function (a) {
          return Viewshed.prototype.getAngle.apply(instance$, arguments);
        };
        this.createCirclesPoints = function () {
          return Viewshed.prototype.createCirclesPoints.apply(instance$, arguments);
        };
        this._site = param$;
        this.distance = param$1;
        this.precision = param$2;
        this.googleClientId = param$3;
        this.urlToSignKey = param$4;
        if (null != this.googleClientId && null != this.urlToSignKey) {
          this.createViewshedBusiness(this.googleClientId, this.urlToSignKey);
        } else {
          this.createViewshed();
        }
      }
      Viewshed.prototype.createCirclesPoints = function () {
        var i, oneCircle, originArray, originLngLat, segmentLengthM, totalArray;
        segmentLengthM = this.distance / (360 / this.precision);
        originLngLat = [
          this._site.lng,
          this._site.lat
        ];
        totalArray = [];
        originArray = [];
        i = 0;
        while (i <= 360 / this.precision) {
          originArray[i] = originLngLat;
          i++;
        }
        totalArray.push(originArray);
        oneCircle = new d3.geo.circle().precision(this.precision).origin(function (x, y) {
          return [
            x,
            y
          ];
        });
        i = 1;
        while (i <= 360 / this.precision) {
          oneCircle.angle(this.getAngle(i * segmentLengthM));
          totalArray.push(oneCircle(originLngLat[0], originLngLat[1]).coordinates[0]);
          i++;
        }
        return totalArray;
      };
      Viewshed.prototype.getAngle = function (circleRadius) {
        return 180 / Math.PI * circleRadius / window.self.constants.earthRadius;
      };
      Viewshed.prototype.preparePolygons = function (totalArray) {
        var centroid, i, instanceId, j, polygon, refArray, retGeoJson;
        retGeoJson = {
          type: 'FeatureCollection',
          features: []
        };
        refArray = [];
        i = 0;
        while (i < totalArray.length) {
          j = 0;
          while (j < totalArray.length) {
            polygon = [];
            if (i !== totalArray.length - 1 && j !== totalArray.length - 1) {
              instanceId = retGeoJson.features.length;
              polygon.push([
                totalArray[i][j],
                totalArray[i][j + 1],
                totalArray[i + 1][j + 1],
                totalArray[i + 1][j],
                totalArray[i][j]
              ]);
              refArray.push(i + '.' + j + ' | ' + i + '.' + (j + 1) + ' | ' + (i + 1) + '.' + (j + 1) + ' | ' + (i + 1) + '.' + j);
              centroid = d3.geo.centroid({
                type: 'Polygon',
                coordinates: polygon
              });
              retGeoJson.features[retGeoJson.features.length] = {
                type: 'Feature',
                id: instanceId,
                properties: {
                  line_id: j,
                  circle_id: i,
                  id: instanceId,
                  centroid: [
                    d3.round(centroid[0], 7),
                    d3.round(centroid[1], 7)
                  ],
                  polyID: retGeoJson.features.length
                },
                geometry: {
                  type: 'Polygon',
                  coordinates: polygon
                }
              };
            }
            j++;
          }
          i++;
        }
        return retGeoJson;
      };
      Viewshed.prototype.changeColor = function (id, color, geoJson) {
        geoJson.features[id].properties.color = color;
        return geoJson;
      };
      Viewshed.prototype.linkAnalysis = function (elevations) {
        var i, lineOfSiteArray, lineOfSiteSegment, returnMessage;
        lineOfSiteArray = [];
        lineOfSiteSegment = (elevations[elevations.length - 1] - elevations[0]) / elevations.length;
        returnMessage = 1;
        i = 0;
        while (i < elevations.length) {
          if (i === 0) {
            lineOfSiteArray[i] = elevations[0] + 2;
          } else {
            lineOfSiteArray[i] = elevations[0] + 2 + lineOfSiteSegment * (i + 1);
            if (lineOfSiteArray[i] < elevations[i])
              returnMessage = 0;
          }
          i++;
        }
        return returnMessage;
      };
      Viewshed.prototype.getCentroids = function (featureCollection) {
        var aFeature, centroids, centroidsNest;
        centroids = [];
        for (aFeature in featureCollection.features) {
          centroids[featureCollection.features[aFeature].id] = {
            coordinates: featureCollection.features[aFeature].properties.centroid,
            line_id: featureCollection.features[aFeature].properties.line_id,
            circle_id: featureCollection.features[aFeature].properties.circle_id,
            id: featureCollection.features[aFeature].properties.id
          };
        }
        centroidsNest = d3.nest().key(function (d) {
          return d.line_id;
        }).entries(centroids);
        return centroidsNest;
      };
      Viewshed.prototype.coordinatesToArray = function (geoJson, maxCoordsRequest) {
        var arrayIterator, googleCoordArray, polygonsIterator;
        googleCoordArray = [];
        polygonsIterator = 0;
        arrayIterator = 0;
        while (polygonsIterator < geoJson.features.length) {
          if (typeof googleCoordArray[arrayIterator] === 'undefined')
            googleCoordArray[arrayIterator] = [];
          googleCoordArray[arrayIterator].push([
            geoJson.features[polygonsIterator].properties.centroid[1],
            geoJson.features[polygonsIterator].properties.centroid[0]
          ]);
          if (googleCoordArray[arrayIterator].length === maxCoordsRequest)
            arrayIterator++;
          polygonsIterator++;
        }
        return googleCoordArray;
      };
      Viewshed.prototype.createRequestUrlBusiness = function (latLngArray, clientId, pathToSignedKeyCreator) {
        var i, requestString, requestStringBase;
        requestStringBase = 'http://maps.googleapis.com';
        requestString = 'http://maps.googleapis.com/maps/api/elevation/json?locations=';
        i = 0;
        while (i < latLngArray.length) {
          requestString += latLngArray[i][0] + ',' + latLngArray[i][1];
          if (i < latLngArray.length - 1)
            requestString += '|';
          i++;
        }
        requestString += '&client=' + clientId + '&sensor=false';
        return $.post(pathToSignedKeyCreator, {
          'url-to-sign': requestString,
          'base-url': requestStringBase
        }, function (finalString) {
          return finalString;
        });
      };
      Viewshed.prototype.createRequestUrl = function (latLngArray) {
        var i, requestString, requestStringBase;
        requestStringBase = 'http://maps.googleapis.com';
        requestString = 'http://maps.googleapis.com/maps/api/elevation/json?locations=';
        i = 0;
        while (i < latLngArray.length) {
          requestString += latLngArray[i][0] + ',' + latLngArray[i][1];
          if (i < latLngArray.length - 1)
            requestString += '|';
          i++;
        }
        requestString += '&sensor=false';
        return requestString;
      };
      Viewshed.prototype.ajaxRetry = function (myurl, limit) {
        return $.ajax({
          url: myurl,
          type: 'POST',
          tryCount: 0,
          async: true,
          retryLimit: limit,
          success: function (json) {
            if (json === 'null' || typeof json === 'undefined' || json === '') {
              json = 'THIS IS A FAILURE!!!!';
              console.log('failllllure -------------------------');
            }
            return json;
          },
          error: function (xhr, textStatus, errorThrown) {
            if (textStatus === 'timeout') {
              this.tryCount++;
              if (this.tryCount <= this.retryLimit) {
                $.ajax(this);
                return;
              }
              return;
            }
            if (xhr.status === 500) {
              return '500 error. :(';
            } else {
              return errorThrown;
            }
          }
        });
      };
      Viewshed.prototype.setElevation = function (geoJson, elevJson) {
        var elevationArray, elevationNest, i, j, nestedElements, polygonID, propertiesArray, tempArray;
        elevationArray = [];
        nestedElements = this.getCentroids(geoJson);
        elevationArray = elevJson;
        i = 0;
        while (i < elevationArray.length) {
          geoJson.features[i].properties.elevation = elevationArray[i].elevation;
          i++;
        }
        propertiesArray = [];
        i = 0;
        while (i < geoJson.features.length) {
          propertiesArray.push(geoJson.features[i].properties);
          i++;
        }
        elevationNest = d3.nest().key(function (d) {
          return d.line_id;
        }).entries(propertiesArray);
        i = 0;
        while (i < elevationNest.length) {
          tempArray = [];
          j = 0;
          while (j < elevationNest[i].values.length) {
            polygonID = elevationNest[i].values[j].id;
            tempArray.push(elevationNest[i].values[j].elevation);
            if (this.linkAnalysis(tempArray)) {
              geoJson = this.changeColor(polygonID, '#00ff00', geoJson);
            } else {
              geoJson = this.changeColor(polygonID, '#ff0000', geoJson);
            }
            j++;
          }
          i++;
        }
        return geoJson;
      };
      Viewshed.prototype.createViewshedBusiness = function (googleBusinessId, pathToSignedKeyCreator) {
        var $map, map, overlay, polygonsGeoJson, thisSite;
        google.maps.visualRefresh = true;
        $map = $('#map');
        map = new google.maps.Map($map[0], {
          zoom: 11,
          mapTypeId: google.maps.MapTypeId.TERRAIN,
          center: new google.maps.LatLng(this._site.lat, this._site.lng)
        });
        thisSite = this;
        overlay = new google.maps.OverlayView;
        polygonsGeoJson = {};
        overlay.onAdd = function () {
          var adminDivisions2, layer, svg;
          layer = d3.select(this.getPanes().overlayLayer).append('div').attr('class', 'SvgOverlay');
          svg = layer.append('svg');
          adminDivisions2 = svg.append('g').attr('class', 'AdminDivisions2');
          return overlay.draw = function () {
            var coordArray, googleMapProjection, jxhr, markerOverlay, overlayProjection, path, requestUrlArray, result, totalArray;
            markerOverlay = this;
            overlayProjection = markerOverlay.getProjection();
            googleMapProjection = function (coordinates) {
              var googleCoordinates, pixelCoordinates;
              googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
              pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
              return [
                pixelCoordinates.x + 4e3,
                pixelCoordinates.y + 4e3
              ];
            };
            path = d3.geo.path().projection(googleMapProjection);
            totalArray = thisSite.createCirclesPoints();
            polygonsGeoJson = thisSite.preparePolygons(totalArray);
            coordArray = thisSite.coordinatesToArray(polygonsGeoJson, 60);
            jxhr = [];
            result = [];
            requestUrlArray = $.map(coordArray, function (val, j) {
              return thisSite.createRequestUrlBusiness(val, googleBusinessId, pathToSignedKeyCreator);
            });
            return $.when.apply($, requestUrlArray).done(function () {
              $.each(coordArray, function (i, subArray) {
                return jxhr.push(thisSite.ajaxRetry(requestUrlArray[i].responseText, 3).done(function (json) {
                  return result.push(json.results);
                }));
              });
              return $.when.apply($, jxhr).done(function () {
                var drawing, drawingAttr, elevation, elevationObject, i, j, sortedCoordArray;
                sortedCoordArray = [];
                i = 0;
                while (i < result.length) {
                  j = 0;
                  while (j < coordArray.length) {
                    if (coordArray[i][0][0] === result[j][0].location.lat) {
                      sortedCoordArray.push(result[j]);
                      break;
                    }
                    j++;
                  }
                  i++;
                }
                elevationObject = [];
                $.each(sortedCoordArray, function (i, data) {
                  return $.merge(elevationObject, data);
                });
                elevation = thisSite.setElevation(polygonsGeoJson, elevationObject);
                drawing = adminDivisions2.selectAll('path').data(elevation.features);
                return drawingAttr = drawing.attr('d', path).enter().append('svg:path').style('fill', function (d) {
                  return d.properties.color;
                }).style('stroke', function (d) {
                  return d.properties.color;
                }).attr('d', path);
              });
            });
          };
        };
        overlay.setMap(map);
        return polygonsGeoJson;
      };
      Viewshed.prototype.createViewshed = function () {
        var $map, map, overlay, polygonsGeoJson, thisSite;
        google.maps.visualRefresh = true;
        $map = $('#map');
        map = new google.maps.Map($map[0], {
          zoom: 11,
          mapTypeId: google.maps.MapTypeId.TERRAIN,
          center: new google.maps.LatLng(this._site.lat, this._site.lng)
        });
        thisSite = this;
        overlay = new google.maps.OverlayView;
        polygonsGeoJson = {};
        overlay.onAdd = function () {
          var adminDivisions2, layer, svg;
          layer = d3.select(this.getPanes().overlayLayer).append('div').attr('class', 'SvgOverlay');
          svg = layer.append('svg');
          adminDivisions2 = svg.append('g').attr('class', 'AdminDivisions2');
          return overlay.draw = function () {
            var coordArray, googleMapProjection, jxhr, markerOverlay, overlayProjection, path, requestUrlArray, result, totalArray;
            markerOverlay = this;
            overlayProjection = markerOverlay.getProjection();
            googleMapProjection = function (coordinates) {
              var googleCoordinates, pixelCoordinates;
              googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
              pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
              return [
                pixelCoordinates.x + 4e3,
                pixelCoordinates.y + 4e3
              ];
            };
            path = d3.geo.path().projection(googleMapProjection);
            totalArray = thisSite.createCirclesPoints();
            polygonsGeoJson = thisSite.preparePolygons(totalArray);
            coordArray = thisSite.coordinatesToArray(polygonsGeoJson, 40);
            jxhr = [];
            result = [];
            requestUrlArray = $.map(coordArray, function (val, j) {
              return thisSite.createRequestUrl(val);
            });
            return $.when.apply($, requestUrlArray).done(function () {
              $.each(coordArray, function (i, subArray) {
                return jxhr.push(thisSite.ajaxRetry(requestUrlArray[i], 3).done(function (json) {
                  return result.push(json.results);
                }));
              });
              return $.when.apply($, jxhr).done(function () {
                var drawing, drawingAttr, elevation, elevationObject, i, j, sortedCoordArray;
                sortedCoordArray = [];
                i = 0;
                while (i < result.length) {
                  j = 0;
                  while (j < coordArray.length) {
                    if (coordArray[i][0][0] === result[j][0].location.lat) {
                      sortedCoordArray.push(result[j]);
                      break;
                    }
                    j++;
                  }
                  i++;
                }
                elevationObject = [];
                $.each(sortedCoordArray, function (i, data) {
                  return $.merge(elevationObject, data);
                });
                elevation = thisSite.setElevation(polygonsGeoJson, elevationObject);
                drawing = adminDivisions2.selectAll('path').data(elevation.features);
                return drawingAttr = drawing.attr('d', path).enter().append('svg:path').style('fill', function (d) {
                  return d.properties.color;
                }).style('stroke', function (d) {
                  return d.properties.color;
                }).attr('d', path);
              });
            });
          };
        };
        overlay.setMap(map);
        return polygonsGeoJson;
      };
      return Viewshed;
    }();
    return Site;
  }();
  return RFAnalysisViewshed;
}();
